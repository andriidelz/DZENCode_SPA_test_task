version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: comments_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  mongodb:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo123
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: rabbit123
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Services
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.full
    ports:
      - "8000:8000"
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/comments_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=amqp://rabbit:rabbit123@rabbitmq:5672//
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MONGODB_URL=mongodb://mongo:mongo123@mongodb:27017/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - media_files:/app/media
    deploy:
      replicas: 2
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4"

  # Celery Services
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.full
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/comments_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=amqp://rabbit:rabbit123@rabbitmq:5672//
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MONGODB_URL=mongodb://mongo:mongo123@mongodb:27017/
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - backend
    volumes:
      - ./backend:/app
      - media_files:/app/media
    deploy:
      replicas: 2
    command: celery -A config worker -l info

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.full
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/comments_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=amqp://rabbit:rabbit123@rabbitmq:5672//
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MONGODB_URL=mongodb://mongo:mongo123@mongodb:27017/
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - backend
    volumes:
      - ./backend:/app
    command: celery -A config beat -l info

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "8080:80"
    environment:
      - VUE_APP_API_URL=http://localhost:8000
      - VUE_APP_WS_URL=ws://localhost:8000
    depends_on:
      - backend

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.full.conf:/etc/nginx/nginx.conf
      - media_files:/var/www/media
    depends_on:
      - backend
      - frontend

  # Monitoring
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

  # Load Testing
  locust:
    build:
      context: ./load-testing
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    volumes:
      - ./load-testing:/mnt/locust
    environment:
      - LOCUST_HOST=http://nginx
    depends_on:
      - nginx

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  elasticsearch_data:
  rabbitmq_data:
  media_files:
  prometheus_data:
  grafana_data:
